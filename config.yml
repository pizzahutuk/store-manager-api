version: 2.1

orbs:
  node-service: phdv/node-service@2.1.68
  terraform: phdv/terraform@2.0.6
  localstack: localstack/platform@1.0
  nx: nrwl/nx@1.5.1
  aws-cli: circleci/aws-cli@3.1.3

parameters:
  env:
    type: enum
    enum: [staging, prod]
    default: staging
  scope:
    type: enum
    enum: [region, market]
    default: region
  mrk:
    type: enum
    enum: [pe, uk, fr, us-east-1, eu-central-1]
    default: us-east-1
  base:
    type: string
    default: "HEAD~1"
    description: "specify the HEAD revision to compare with"
  tag:
    type: string
    default: ""
    description: "specify the tag to rollback"
  terraform_version:
    type: string
    default: 1.9.2
  trigger:
    type: boolean
    default: true

executors:
  node:
    docker:
      - image: cimg/node:20.15
  aws:
    docker:
      - image: amazon/aws-cli

jobs:
  setup_nx:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - nx/set-shas
  package_lambdas:
    executor: node
    steps:
      - checkout
      - run:
          name: rollback if parameter "tag" value is set
          command: |
            if [ -z "<<pipeline.parameters.tag>>" ]; then
              echo "Tag value is blank. Skipping checkout."
            else
              if git show-ref --tags --quiet --verify -- "refs/tags/<<pipeline.parameters.tag>>"; then
                echo "Tag <<pipeline.parameters.tag>> exists. Rolling back..."
                git checkout tags/<<pipeline.parameters.tag>>
              else
                echo "Tag <<pipeline.parameters.tag>> does not exist. Skipping checkout."
              fi
            fi
      - attach_workspace:
          at: ~/project
      - aws-cli/setup
      - run:
          name: Package Lambda
          command: ./scripts/package_lambda.sh <<pipeline.parameters.base>>
      - persist_to_workspace:
          paths:
            - .
          root: ~/project
  deploy_lambdas:
    executor: node
    steps:
      - attach_workspace:
          at: ~/project
      - aws-cli/setup
      - run:
          name: Upload to S3 and deploy Lambda
          command: echo '*** dont really deploy'
          # command: ./scripts/deploy_lambda.sh <<pipeline.parameters.base>> <<pipeline.parameters.mrk>>
      - persist_to_workspace:
          paths:
            - .
          root: ~/project
  tag_release:
    executor: node
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Create tag
          command: |
            if [ -z "${CIRCLE_JOB_PARAMETERS[tag]}" ]; then
              echo "Creating tag..."
              mkdir -p ~/.ssh
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              git config --global user.name "Circle CI"
              git config --global user.email "app@circleci.com"
              git tag -a $(date +"%Y%m%d_%H%M") -m "PROD deployment"
              git push --tags
            else
              echo "This is rollback process, so tagging is skipped"
            fi

workflows:
  main:
    jobs:
      - node-service/checkout_and_persist_workspace:
          name: checkout
      - node-service/install_yarn_deps:
          name: install
          executor: node
          context: maverick-aws
          requires:
            - checkout
      - setup_nx:
          name: prepare
          context: maverick-aws
          requires:
            - install
      - node-service/run_script:
          name: lint
          executor: node
          package_manager: yarn
          script_name: lint
          persist_to_workspace: false
          requires:
            - prepare
      # test job should be added here after all tests are ready
      - node-service/run_script:
          name: build
          executor: node
          package_manager: yarn
          script_name: nx run-many --target=build --all --parallel=2
          persist_to_workspace: true
          requires:
            - prepare
      - package_lambdas:
          name: package_lambdas
          context:
            - maverick-aws
          requires:
            - build
          filters:
            branches:
              only:
                - yin5925
                # - develop
                # - master
      - terraform/init_and_plan:
          name: terraform_plan
          context:
            - maverick-aws
          extra_args_init: "-backend-config=configurations/<<pipeline.parameters.mrk>>/<<pipeline.parameters.env>>/config.s3.tfbackend -reconfigure -upgrade"
          extra_args: '-var-file="configurations/<<pipeline.parameters.mrk>>/<<pipeline.parameters.env>>/variables.tfvars"'
          terraform_version: <<pipeline.parameters.terraform_version>>
          attach_workspace: ~/project
          working_directory: ~/project/infra/<<pipeline.parameters.scope>>/
          persist_to_workspace_filepath_prefix: infra/<<pipeline.parameters.scope>>/
          requires:
            - checkout
      - approval:
          context: maverick-aws
          name: approval
          type: approval
          requires:
            - terraform_plan
            - package_lambdas
          filters:
            branches:
              only:
                - yin5925
                # - master
                # - develop
      - terraform/init_and_apply:
          name: terraform_apply
          context:
            - maverick-aws
          extra_args_init: "-backend-config=configurations/<<pipeline.parameters.mrk>>/<<pipeline.parameters.env>>/config.s3.tfbackend -reconfigure -upgrade"
          terraform_version: <<pipeline.parameters.terraform_version>>
          working_directory: ~/project/infra/<<pipeline.parameters.scope>>/
          init: true
          requires:
            - approval
      - deploy_lambdas:
          name: deploy_lambdas
          context:
            - maverick-aws
          requires:
            - approval
      - tag_release:
          name: tag_release
          context:
            - maverick-aws
          requires:
            - deploy_lambdas
          filters:
            branches:
              only:
                - master
